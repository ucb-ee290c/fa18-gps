#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#  build-config
#  Copyright 2017 Edward Wang <edward.c.wang@compdigitec.com>
#
#  Build the configuration database from a series of JSON config files.
#  Dumps the output in JSON format to standard output.
#  See README.config for more details.

# pylint: disable=invalid-name

import json
import sys

def unpack(config_dict, prefix=""):
    """
    Unpack the given config_dict, flattening key names recursively.
    >>> p = unpack({"one": 1, "two": 2}, prefix="snack")
    >>> p == {'snack.one': 1, 'snack.two': 2}
    True
    >>> p = unpack({"a": {"foo": 1, "bar": 2}})
    >>> p == {'a.foo': 1, 'a.bar': 2}
    True
    >>> p = unpack({"a.b": {"foo": 1, "bar": 2}})
    >>> p == {"a.b.foo": 1, "a.b.bar": 2}
    True
    >>> p = unpack({
    ...     "a": {
    ...         "foo": 1,
    ...         "bar": 2
    ...     },
    ...     "b": {
    ...         "baz": 3,
    ...         "boom": {"rocket": "chip", "hwacha": "vector"}
    ...     },
    ... })
    >>> p == {"a.foo": 1, "a.bar": 2, "b.baz": 3, "b.boom.rocket": "chip",
    ...     "b.boom.hwacha": "vector"}
    True
    """
    # We don't want an extra "." in the beginning.
    real_prefix = "" if prefix == "" else prefix + "."
    output_dict = {}
    for key, value in config_dict.items():
        if isinstance(value, dict):
            output_dict.update(unpack(value, real_prefix + key))
        else:
            output_dict[real_prefix + key] = value
    return output_dict

def load_json_from_file(filename):
    """
    Load JSON from a filename, returning a blank dictionary if the file is
    empty, instead of an error.
    """
    file_contents = open(filename, "r").read()
    if file_contents.strip() == "":
        return {}
    else:
        return json.loads(file_contents)

def main(args):
    del args[0]

    # Load each of the JSON files into a dictionary, unpack, and repeatedly
    # update.
    output_dict = {}
    for json_file in args:
        output_dict.update(unpack(load_json_from_file(json_file)))

    # Dump JSON output to stdout.
    print(json.dumps(output_dict, indent=2, sort_keys=True))

    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv))
