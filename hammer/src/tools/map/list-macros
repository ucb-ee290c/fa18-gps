#!/bin/bash

unset output
unset mode
verilog=()
macros=()
while [[ "$1" != "" ]]
do
    case "$1" in
    "-o") output="$2"; shift;;
    "--mode") mode="$2"; shift;;
    $0);;
    *.v) verilog+=("$1");;
    *.macro_library.json) macros+=("$1");;
    *) echo "Unknown argument $1"; exit 1;;
    esac
    shift
done

case "$mode" in
synthesis);;
simulation) exit 0;;
*) echo "Unknown mode $mode"; exit 2;;
esac

if [[ "${verilog[*]}" == "" ]]
then
    echo "You must provide a Verilog file to generated post-map dependencies"
    exit 1
fi

if [[ "${macros[*]}" == "" ]]
then
    echo "You must provide a macro list to generate post-map dependencies"
    exit 1
fi

# FIXME: Since this "parses" Verilog, this should be a pcad tool, but I'm lazy
# today.  The pcad verilog compiler is currently tested by diffing verilog, so
# this is good enough for now...
echo "# autogenerated by $0" > $output
cat "${verilog[@]}" | grep -Ee "^  [A-Za-z0-9_]+ [A-Za-z0-9_]+\($" | sed 's/^ *\([A-Za-z0-9_]*\) \([A-Za-z0-9_]*\).*$/\1/g' | sort | uniq | while read module_name
do
    if [[ "$(echo "$module_name" | wc -l)" != 1 ]]
    then
        echo "Unable to find module in $module" >&2
        exit 1
    fi
    module_family="$(cat "${macros[@]}" | grep "${module_name}" | sed 's/^.*"family": "\([A-Za-z0-9_-]*\)".*$/\1/' | sort | uniq)"
    if [[ "$(echo "$module_family" | wc -l)" != 1 ]]
    then
        echo "Unable to find module family for $module_name" >&2
	echo "found: $module_family" >&2
        exit 1
    fi

    echo "-include \$(OBJ_TECH_DIR)/generated/${module_family}/${module_name}.mk" >> $output
done
