#!/bin/bash

unset output
unset base_dir
unset main
unset sbt
unset project
unset sbtargs; sbtargs="" # set a blank default
unset sbtstaging
while [[ "$1" != "" ]]
do
    case "$1" in
    --output) output="$2"; shift;;
    --basedir) base_dir="$2"; shift;;
    --main) main="$2"; shift;;
    --sbt) sbt="$2"; shift;;
    --project) project="$2"; shift;;
    --sbtargs) sbtargs="$2"; shift;;
    --sbtstaging) sbtstaging="$2"; shift;;
    *) echo "Unknown argument $1"; exit 1;;
    esac
    shift
done

if [[ "$output" == "" ]]
then
    echo "provide --output"
    exit 2
fi

if [[ "$base_dir" == "" ]]
then
    echo "provide --basedir"
    exit 2
fi

if [[ "$main" == "" ]]
then
    echo "provide --main"
    exit 2
fi

if [[ "$sbt" == "" ]]
then
    echo "provide --sbt"
    exit 2
fi

# Optionally switch into an sbt sub-project if called for.
if [[ -z "$project" ]]
then
    project_str=""
else
    project_str="\"project ${project}\""
fi

# Use a custom staging directory if it is set and if the source dir is
# unwritable.
if [[ "$sbtstaging" != ""  ]]; then
    # Detect the writability at script runtime.
    read -r -d '' staging_snip << EOM
if [[ ! -w "${base_dir}" ]]; then
    staging_dir="-Dsbt.global.staging=${sbtstaging}"
fi
EOM

else
    staging_snip=""
fi

cat >$output <<EOF
#!/bin/bash

set -x

staging_dir=""
${staging_snip}

cd "${base_dir}"
true | ${sbt} ${sbtargs} \${staging_dir} ${project_str} "run-main ${main} \$*"
EOF
chmod +x $output

