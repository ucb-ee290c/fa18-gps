#!/usr/bin/env python3
# Copyright 2017 Edward Wang <edward.c.wang@compdigitec.com>
# Build a certain prebuilt binary contrib.
# Respects PLSI_MAKEFLAGS and PLSI_MAKEFILES (see makeplsi for documentation).
# Example: build-contrib --name python --makefile_var OBJ_TOOLS_BIN_PYTHON3

import argparse
import os
import re
import subprocess
import sys


def run_cmd(cmd, show_output=False):
    """Convenience helper to run a command and return the utf-8 decoded, stripped
    output.
    show_output - set to True to print the output to stdout as it executes
    """
    print("build-contrib: executing " + cmd)
    if show_output:
        subprocess.Popen(cmd, shell=True).communicate()
    else:
        return subprocess.check_output(cmd, shell=True).decode('utf-8').strip()

def main(argv):
    parser = argparse.ArgumentParser()
    parser.add_argument("--name", dest="name", required=True,
                        help="Name of the contrib. e.g. python")
    parser.add_argument(
        "--makefile_var",
        dest="makefile_vars",
        action="append",
        help="Makefile variable which is the target. e.g. OBJ_TOOLS_BIN_PYTHON3",
        required=True)
    parser.add_argument(
        "--cache_dir",
        dest="cache_dir",
        default=os.path.realpath("obj/cache"))
    parser.add_argument(
        "--src_dir",
        dest="src_dir",
        default=os.path.realpath("contrib_src"))
    args = parser.parse_args(argv)

    name = args.name
    cache_dir = args.cache_dir
    src_dir = args.src_dir
    bin_dir = "contrib_{name}".format(name=name)
    # Ensure that the folder has been created for readlink calls below.
    os.makedirs(bin_dir, exist_ok=True)

    makefile_fragment_contents = """
# Prevent make from trying to execute a default target.
.PHONY: dummylol

OBJ_TOOLS_BIN_DIR={bin_dir}
OBJ_TOOLS_SRC_DIR={src_dir}
PLSI_CACHE_DIR={cache_dir}
CMD_GCC ?= {cmd_gcc}
CMD_GXX ?= {cmd_gxx}
SCHEDULER_CMD={scheduler_cmd}
    """.format(
        bin_dir=bin_dir,
        src_dir=src_dir,
        cache_dir=cache_dir,
        cmd_gcc=run_cmd("which gcc"),
        cmd_gxx=run_cmd("which g++"),
        scheduler_cmd=os.path.realpath("src/addons/scheduler/local/tools/run")
    )
    with open('Makefile.tmp', 'w') as f:
        f.write(makefile_fragment_contents)

    run_cmd("make -rR {flags} {files} -f Makefile.tmp -f Makefile.tools -pn dummylol | ./src/tools/get-makefile-vars - > targets.txt".format(
        flags=os.environ.get("PLSI_MAKEFLAGS", ""),
        files=run_cmd("./src/tools/get-makefiles-args $PLSI_MAKEFILES")),
            show_output=True)

    # Create a Makefile snippet and shell snippet to use this prebuilt
    # contrib.
    makefile_snippet_path = os.path.realpath(
        "{bin_dir}/Makefile.{name}".format(bin_dir=bin_dir, name=name))
    makefile_snippet_contents = """
# This is an automatically generated snippet to use the prebuilt binaries
# for tool {name}.
# This file must be used in conjunction with the appropriate -o options
# to prevent make from trying to rebuild the pre-built binaries.

SELF_DIR := $(dir $(lastword $(MAKEFILE_LIST)))
    """.format(name=name)
    with open(makefile_snippet_path, 'w') as f:
        f.write(makefile_snippet_contents)

    shell_snippet_contents = """
# This is an automatically generated snippet to use the prebuilt binaries
# for tool {name}.
# To use this, simply source this script and call ./makeplsi as usual.

bin_dir_{name}=$(readlink -f {bin_dir})
export PLSI_MAKEFILES="$PLSI_MAKEFILES $bin_dir_{name}/Makefile.{name}"
    """.format(name=name, bin_dir=bin_dir)
    with open("contrib_{name}.sh".format(name=name), 'w') as f:
        f.write(shell_snippet_contents)

    for var in args.makefile_vars:
        # Find the actual target name from the variable name.

        makefile_target_name_grep = run_cmd(
            'cat targets.txt | grep "{var} = " || true'.format(
                var=var))  # ignore grep failures
        # Check for partial matches (e.g. FOO matching FOOBAR), which is
        # undesired.
        if re.match('^{var} = .*'.format(var=re.escape(var)),
                    makefile_target_name_grep) is None:
            print(
                "No target found for variable {var}".format(
                    var=var),
                file=sys.stderr)
            # Clean up
            run_cmd('rm -f "contrib_{name}.sh"'.format(name=name))
            return 1

        makefile_target_name = run_cmd(
            'cat targets.txt | grep "{var} = " | sed -e "s/^{var} = //g"'.format(var=var))
        if makefile_target_name == "":
            print(
                "No target found for variable {var}".format(
                    var=var),
                file=sys.stderr)
            # Clean up
            run_cmd('rm -f "contrib_{name}.sh"'.format(name=name))
            return 1

        print("Makefile target is {makefile_target_name}".format(
            makefile_target_name=makefile_target_name))

        # Build the target.
        run_cmd(
            'make -rR {flags} {files} -f Makefile.tmp -f Makefile.tools -j1 "{makefile_target_name}"'.format(
                flags=os.environ.get("PLSI_MAKEFLAGS", ""),
                files=run_cmd("./src/tools/get-makefiles-args $PLSI_MAKEFILES"),
                makefile_target_name=makefile_target_name),
            show_output=True)

        # Find target path relative to the bin_dir.
        makefile_target_rel = os.path.relpath(
            os.path.realpath(makefile_target_name),
            os.path.realpath(bin_dir))

        # Drop pointers into the contrib and Makefile scripts to make it easy
        # to use.
        with open('contrib_{name}.sh'.format(name=name), 'a') as f:
            f.write(
                'export PLSI_MAKEFLAGS="$PLSI_MAKEFLAGS -o $bin_dir_{name}/{makefile_target_rel}"'.format(
                    name=name, makefile_target_rel=makefile_target_rel))

        with open(makefile_snippet_path, 'a') as f:
            f.write(
                '{cmd_target_name} := $(SELF_DIR)/{makefile_target_rel}'.format(
                    cmd_target_name=var.replace(
                        "OBJ_TOOLS_BIN_",
                        "CMD_"),
                    makefile_target_rel=makefile_target_rel))

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
