#!/bin/bash

set -ex
unset rm_tar
unset output
unset vpd
unset top
# See PRIMETIME_PATH_TO_TESTBENCH
unset testbench
rtl_trace=""
v=()
db=()
unset vcd2vpd
unset vcd2saif
unset plsi_config
while [[ "$1" != "" ]]
do
    case "$1" in
    $0) ;;
    --output) output="$2"; shift;;
    */PT-RM_*.tar) rm_tar="$1";;
    *.vpd) vpd="$1";;
    --top) top="$2"; shift;;
    --testbench) testbench="$2"; shift;;
    --rtl-trace) rtl_trace="-rtl";;
    *.v) v+=("$1");;
    *.db) db+=("$1");;
    */pt_shell) pt_shell="$1";;
    */vcd2saif) vcd2saif="$1";;
    */vpd2vcd) vpd2vcd="$1";;
    *.plsi_config.json) plsi_config="$1";;
    *) echo "unknown argument $1" >&2; exit 1;;
    esac
    shift
done

run_dir="$(dirname $output)/synopsys-pt-workdir"
rm -rf $run_dir
mkdir -p $run_dir

tar -xvf $rm_tar -C $run_dir --strip-components=1
mkdir -p $run_dir/generated-scripts

# Don't let anyone else set any of these variables, I'm not sure why Synopsys
# keeps screwing with me.
find $run_dir -iname "*.tcl" | xargs sed 's/set NETLIST_FILES .*//g' -i
find $run_dir -iname "*.tcl" | xargs sed 's/set CONSTRAINT_FILES .*//g' -i
find $run_dir -iname "*.tcl" | xargs sed 's/set ACTIVITY_FILE .*//g' -i

# Most of the customization of the DC reference methodology is done here: this
# sets all the input files and such.
mkdir -p $run_dir/rm_setup
cat >> $run_dir/rm_setup/common_setup.tcl <<EOF
set DESIGN_NAME "$top";
set NETLIST_FILES "$(readlink -f ${v[@]})";
set ACTIVITY_FILE "$(readlink -f $vpd)";
set TARGET_LIBRARY_FILES "$(readlink -f ${db[@]} | xargs echo)";
set CONSTRAINT_FILES "$(readlink -f $run_dir/generated-scripts/constraints.tcl)";
EOF

sed "s@^set STRIP_PATH .*@set STRIP_PATH \"$testbench\"@" -i $run_dir/rm_setup/pt_setup.tcl


# PT needs clock to be defined.  This script looks a whole lot like the DC one
# and might not work correctly.
python3 >$run_dir/generated-scripts/constraints.tcl <<EOF
import json
with open("${plsi_config}") as f:
        config = json.load(f)

import re
for clock in config["clocks"]:
        clock_name = clock["name"]
        clock_period = clock["period"]
        if not re.match("[0-9]+ *[np]s", clock_period):
                error

        if re.match("[0-9]+ *ns", clock_period):
                clock_period_ns = re.sub(" *ns", "", clock_period)
        if re.match("[0-9]+ *ps", clock_period):
                clock_period_ns = int(re.sub(" *ps", "", clock_period)) / 1000.0

        print("create_clock -name {0} -period {1}".format(clock_name, clock_period_ns))
EOF

# FIXME: I have no idea what this is for, but I can't set that variable to
# empty and it's not in Yunsup's VLSI repo.
sed 's/source $NAME_MAP_FILE//g' -i $run_dir/rm_pt_scripts/pt.tcl

# For debugging purposes, I list all the designs before reading one
sed 's/^current_design /list_designs -all\ncurrent_design /g' -i $run_dir/rm_pt_scripts/pt.tcl

# We can read vpd files using 'read_vcd'
sed 's@^read_vcd .*$@read_vcd '$rtl_trace' $ACTIVITY_FILE -strip_path $STRIP_PATH@g' -i $run_dir/rm_pt_scripts/pt.tcl

# I use averaged mode, because 
sed 's@^set power_analysis_mode .*@set power_analysis_mode average@' -i $run_dir/rm_pt_scripts/pt.tcl
sed 's@^set_power_analysis_options -waveform_format .*@@' -i $run_dir/rm_pt_scripts/pt.tcl

# Better power report which shows component-wise power estimation with detailed numbers.
sed 's@^report_power\s*>@report_power -nosplit -verbose -hierarchy >@' -i $run_dir/rm_pt_scripts/pt.tcl

# In order to read VPD files I need to set VCS_HOME
cat >$run_dir/enter.bash <<EOF
export VCS_HOME="$(readlink -f $(dirname $vpd2vcd)/..)"
export VCS_MODE_FLAG=64
export PATH="\$VCS_HOME/bin:\$PATH"
EOF
source $run_dir/enter.bash

cd $run_dir
echo -e "error_info\nquit" | $pt_shell -f rm_pt_scripts/pt.tcl |& tee pt.log

set +e
grep ^Warning pt.log && (echo "PrimeTime produced warning messages")
grep ^Error pt.log && (echo "PrimeTime produced error messages"; exit 1)
exit 0
