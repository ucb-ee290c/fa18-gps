#!/usr/bin/python

import sys
import argparse
import json

def parse_args(args):
  parser = argparse.ArgumentParser(description = 'generate macros')
  parser.add_argument('--conf', type=str, required=True,
    help="""macro conf file from FIRRTL (e.g. <design>.conf)""")
  parser.add_argument('--json', type=str, required=True,
    help="""output JSON file""")

  res = parser.parse_args(args)
  return res.conf, res.json

def read_conf(filename):
  srams = list()
  with open (filename) as f:
    for line in f:
      sram = {"type" : "sram"}
      tokens = line.split()
      for i in xrange(0, len(tokens), 2):
        field = tokens[i]
        value = tokens[i+1]
        if field == 'name':
          sram[field] = value
        elif field == 'depth':
          sram[field] = int(value)
        elif field == 'width':
          sram[field] = int(value)
        elif field == 'ports':
          sram[field] = value.split(',')
        elif field == 'mask_gran':
          sram[field] = int(value)
        else:
          sys.exit('%s: unknown argument %s' % (sys.argv[0], field))

      srams.append(sram) 

  return srams

def expand_ports(srams):
  for sram in srams:
    eports = list()
    r_idx = 0
    w_idx = 0
    rw_idx = 0
    for port in sram['ports']:
      eport = dict()
      masked = False

      if port[0] == 'm':
        masked = True
        port = port[1:]

      if port == 'rw':
        eport["clock port name"] = "RW%d_clk" % rw_idx
        eport["output port name"] = "RW%d_rdata" % rw_idx
        eport["input port name"] = "RW%d_wdata" % rw_idx
        eport["address port name"] = "RW%d_addr" % rw_idx
        eport["chip enable port name"] = "RW%d_en" % rw_idx
        eport["write enable port name"] = "RW%d_wmode" % rw_idx
        if masked:
          eport["mask port name"] = "RW%d_wmask" % rw_idx
          eport["mask granularity"] = sram["mask_gran"]
        rw_idx += 1

      elif port == 'read':
        eport["clock port name"] ="R%d_clk" % r_idx
        eport["output port name"] ="R%d_data" % r_idx
        eport["address port name"] ="R%d_addr" % r_idx
        eport["chip enable port name"] ="R%d_en" % r_idx
        r_idx += 1

      elif port == 'write':
        eport["clock port name"] = "W%d_clk" % w_idx
        eport["input port name"] = "W%d_data" % w_idx
        eport["address port name"] = "W%d_addr" % w_idx
        eport["chip enable port name"] = "W%d_en" % w_idx
        if masked:
          eport["mask port name"] = "W%d_mask" % w_idx
          eport["mask granularity"] = sram["mask_gran"]
        w_idx += 1

      eports.append(eport)

    sram['ports'] = eports

  return

if __name__ == '__main__':
  conf_filename, json_filename = parse_args(sys.argv[1:])

  srams = read_conf(conf_filename)

  expand_ports(srams)

  with open(json_filename, 'w') as f:
    f.write(json.dumps(srams, indent=2, separators=(',', ': ')))
