#!/bin/bash

set -e

verilog=()
verilog_h=()
c=()
h=()
o=()
output=""
mode=""
vcs=""
top=""
include=()
i=()
cc=()
debug_flags=()
tbvfrag=""
lint_flags=()
notiming_flags=()
ucli_build_flags=()
ucli_run_flags=()
while [[ "$1" != "" ]]
do
    case "$1" in
    */verilator.h) ;;
    */emulator.cc) ;;
    *.v) verilog+=("$1");;
    *.vh) verilog_h+=("$1");;
    *.c) c+=("$1");;
    *.h) h+=("-CC \"-include$1\"");;
    *.c++) c+=("$1");;
    *.cxx) c+=("$1");;
    *.cc) c+=("$1");;
    *.so) o+=("$1");;
    */bin/vcs) vcs="$1";;
    */plsi-include.stamp) i+=("-CC \"-I$(dirname "$1")\"");;
    *.tb.vfrag) tbvfrag="+define+TBVFRAG+\\\"$(basename $1)\\\"";;
    *.ucli) ucli_run_flags+=("$1");;
    *.tab) ucli_build_flags+=("-P" "$1");;
    */g++)
      export PATH="$(dirname "$1"):$PATH"
      cc+=("-CC \"-Wl,-rpath,$(dirname "$1")/../lib64\"")
      ;;
    "-o") output="$2"; shift;;
    "--level") level="$2"; shift;;
    "--mode") mode="$2"; shift;;
    "--top") top="$2"; shift;;
    $0) ;;
    *) echo "Unknown argument $1" >&2; exit 2;;
    esac
    shift
done

rm -rf "$output".daidir "$output".vcs_build_dir
mkdir -p "$output".vcs_build_dir

cat >$output.enter <<EOF
export VCS_HOME="$(dirname $(dirname "$vcs"))"
export PATH="\$VCS_HOME/bin:\$PATH"
export MGLS_LICENSE_FILE="$MGLS_LICENSE_FILE"
export SNPSLMD_LICENSE_FILE="$SNPSLMD_LICENSE_FILE"
EOF
source $output.enter

# FIXME: This is Chisel-specific, but I figure adding errors is always safe
lint_flags+=("-error=PCWM-L")

# FIXME: This is specific to (at least) DC's output on the 32nm EDK, but
# there's no way to shim these arguments into VCS right now.
lint_flags+=("-suppress=TFIPC") # too few input port connections
lint_flags+=("-suppress=TMR") # text macro redefine
lint_flags+=("-suppress=PCTIO-L") # port coerced to inout
lint_flags+=("-suppress=WUPD") # UDP previously declared

# FIXME: These flags might be relevant for turning off timing-accurate
# simulations when using the EDK.
#notiming_flags+=("+define+functonial") # EDK Verilog decides this
#notiming_flags+=("+notimingcheck") # This turns off all $setup{,hold} PLIs
#notiming_flags+=("+delay_mode_unit") # I thought this forced VCS to use the minimum timescale, but it actually doesn't

# FIXME: This is actually Rocket Chip specific
if [[ "$level" == "syn" ]]
then
    debug_flags+=("+define+GATE_LEVEL")
fi

if [[ "$mode" == "debug" ]]
then
    debug_flags+=("+define+DEBUG")
fi

if [[ "$vcs" == "" ]]
then
    echo "Unable to find VCS, pass it on the command line"
    exit 1
fi

cd "$output".vcs_build_dir
set -x
$vcs -full64 \
    -quiet \
    -notice -line \
    -timescale=1ns/10ps \
    -sverilog \
    -debug_pp \
    +rad \
    +v2k \
    +vcs+lic+wait \
    +vcs+initreg+random \
    ${notiming_flags[@]} \
    ${lint_flags[@]} \
    ${debug_flags[@]} \
    ${ucli_build_flags[@]} \
    -CC "-std=c++11" \
    $tbvfrag \
    ${h[*]} \
    ${i[*]} \
    $(readlink -f ${verilog_h[*]}) \
    $(readlink -f ${verilog[*]}) \
    $(readlink -f ${c[*]}) \
    $(readlink -f ${o[*]}) \
    -o "$output"

cat ${ucli_run_flags[@]} - >$output.ucli <<EOF
run
quit
EOF
