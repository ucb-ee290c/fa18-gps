// Format for the pinmap.json file.
// Currently only necessary for Vivado FPGA implementations.
{
  // Array of all the different pin mappings for this core.
  // If pin in the top level module is not specified in this mapping, it will
  // be left disconnected.
  // The "clock" pin will be automatically connected.
  // TODO: specify clock options in the future
  // TODO: implement automatic pin assignment
  "pinmap": [
    {
      "dut_name": "io_x", // The pin name in the generated top-level Verilog file.
      "pinname": "sw_0", // The pin name in the FPGA (e.g. see arty-master.xdc)
      "type": "input" // A string of either "input" or "output".
    },
    {
      "dut_name": "io_array",
      "pinname": [ // We can also connect an array in the top-level Verilog to multiple pins.
        "pin_0_fpga",
        "pin_1_fpga",
        "pin_2_fpga",
        "pin_3_fpga"
      ],
      "type": "output"
    },
    {
      /*
       * We can also connect tristate pins, assuming that you either have a Bundle like so:
       * Note that the Xilinx IOBUF is weird; "output" is the data from the pin->FPGA.
class TristateIO extends Bundle {
	val input = Input(Bool()) // "_o" in the IOBUF (pad->FPGA)
	val output = Output(Bool()) // "_i" in the IOBUF (pad<-FPGA)
	val output_enable = Output(Bool()) // "_oe" in the IOBUF (set to true to push data pad<-FPGA)
}
       * This is equivalent to the following declarations below.
       */
      "dut_name": "io_tristate",
      "pinname": "gpio_4",
      "type": "inout" // notice the "inout" here.
    },
    {
      "dut_name": "io_tristate_output",
      "pinname": "gpio_4_i",
      "type": "output"
    },
    {
      "dut_name": "io_tristate_input",
      "pinname": "gpio_4_o",
      "type": "input"
    },
    {
      "dut_name": "io_tristate_output_enable",
      "pinname": "gpio_4_oe",
      "type": "output"
    },

    // ...more entries here...
    {
      "dut_name": "io_xor",
      "pinname": "led_2",
      "type": "output"
    }
  ]
}
