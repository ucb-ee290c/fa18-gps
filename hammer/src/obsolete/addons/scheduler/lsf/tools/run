#!/bin/bash

# This is the maximum number of threads that can be run on a machine at once.
# By default we ask for the smallest machine in the whole cluster.
max_threads="$(lshosts | awk '{print $5}' | grep -e '^[0-9]' | sort --numeric-sort | head -n1)"

# This is set to TRUE if we're trying to run make, which there's special
# support for in the scheduler addons.
is_make="FALSE"

# Arguments that go to PLSI schedulers come before the first "--".
while [[ "$1" != "--" ]]
do
    case "$1" in
    --max-threads=*)
      max_threads="$(echo -e "$max_threads\\n$(echo "$1" | cut -d= -f2-)" | sort | head -n1)"
      ;;

    --make)
      unset MAKEFLAGS
      is_make="TRUE"
      ;;

    *)
      echo "unknown argument $1"
      exit 1
      ;;
    esac
    shift
done
shift

# If we're running a make then some extra argumens need to be stuck in there.
# This pulls the command argument off so that can be done.
command="$1"
shift

if [[ "$is_make" == "TRUE" ]]
then
    # PLSI schedulers are expected to support make jobs natively by passing the
    # correct "-j" argument to them that cooresponds to the number of jobs they
    # should schedule.
    set -x
    bsub -Is -C $max_threads "$command" -j$max_threads "$@"
else
    # Since this isn't a make job, PLSI schedulers are expected to set an
    # environment variable so the jobs run inside them know how many child jobs
    # should be run.  Note that since some of these sub-jobs are actually make
    # in disguise, we also set MAKEFLAGS here.
    export PLSI_SCHEDULER_MAX_THREADS="$max_threads"
    export MAKEFLAGS="$MAKEFLAGS -j$max_threads"

    set -x
    bsub -Is -C $max_threads "$command" "$@"
fi
