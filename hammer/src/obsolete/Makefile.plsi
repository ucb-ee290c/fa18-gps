# Copyright 2016-2017 Palmer Dabbelt <palmer@dabbelt.com>

# Disable the built-in rules to speed up execution.
MAKEFLAGS += -r
.SUFFIXES:

# Add a folder of common utilities to the PATH for use in the scripts.
SHELL := /bin/bash
export PATH := src/tools/shell:$(PATH)

# The default target, which runs everything and tells you if it passed or not.
all: report

###############################################################################
# Default Variables
###############################################################################

# Don't change these variables here, instead override them with a
# "Makefile.project" in the directory above this one, or on the command line
# (if you want to do experiments).
-include Makefile.local
-include ../Makefile.project

# The "core generator" generates top-level RTL, but doesn't include anything
# that's technology specific
CORE_GENERATOR ?= rocketchip

# The "soc generator" is used to add everything to a soc that isn't part of
# the core generator (maybe because it's a NDA or something).  This default
# soc generator doesn't actually do anything at all.
SOC_GENERATOR ?= nop

# The technology that will be used to implement this design.
TECHNOLOGY ?= tsmc180osu

# Selects the CAD tools that will be run.  For now, I'm defaulting to Synopsys
# as they're the only ones I've actually implemeted wrappers for.
MAP_TOOL ?= macro
SYNTHESIS_TOOL ?= dc
PAR_TOOL ?= icc

# The configuration to run when running various steps of the process
CORE_CONFIG ?= DefaultConfig
CORE_SIM_CONFIG ?= default
SOC_CONFIG ?= default
MAP_CONFIG ?= default
SYN_CONFIG ?= default
PAR_CONFIG ?= default

# Defines the simulator used to run simulation at different levels
SIMULATOR ?= verilator
CORE_SIMULATOR ?= $(SIMULATOR)
SOC_SIMULATOR ?= $(SIMULATOR)
MAP_SIMULATOR ?= $(SIMULATOR)
SYN_SIMULATOR ?= $(SIMULATOR)
PAR_SIMULATOR ?= $(SIMULATOR)

# Defines the formal verification tool to use at different levels.
FORMAL_TOOL ?= none
SYN_FORMAL_TOOL ?= $(FORMAL_TOOL)

# This allows post-synthesis power-related signoff, which while not being
# exactly accurate can be used to get a general idea if a design is viable.
POWER_SIGNOFF_TOOL ?= none
SYN_POWER_SIGNOFF_TOOL ?= $(POWER_SIGNOFF_TOOL)
PAR_POWER_SIGNOFF_TOOL ?= $(POWER_SIGNOFF_TOOL)

# The scheduler to use when running large jobs.  Changing this doesn't have any
# effect on the generated files, just the manner in which they are generated.
SCHEDULER ?= auto

# A cache directory for things that are, for some reason, difficult to create
# and never change.  This is suitable for installing as a read-only shared
# directory as long as someone writes to it first.
PLSI_CACHE_DIR ?= obj/cache

# A directory that contains the tools that PLSI builds, in case you want to
# share them.
OBJ_TOOLS_DIR ?= obj/tools

##############################################################################
# Internal Variables
##############################################################################

# These variables aren't meant to be overridden by users -- you probably
# shouldn't be changing them at all.

# OBJ_*_DIR are the directories in which outputs end up
OBJ_TOOLS_SRC_DIR = $(OBJ_TOOLS_DIR)/src
OBJ_TOOLS_BIN_DIR = $(OBJ_TOOLS_DIR)/install
OBJ_CONFIG_DIR = obj/config
OBJ_CORE_DIR = obj/core-$(CORE_GENERATOR)-$(CORE_CONFIG)
OBJ_SOC_DIR = obj/soc-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)
OBJ_TECH_DIR = obj/technology/$(TECHNOLOGY)
OBJ_MAP_DIR = obj/map-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)-$(TECHNOLOGY)-$(MAP_CONFIG)
OBJ_SYN_DIR = obj/syn-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)-$(TECHNOLOGY)-$(MAP_CONFIG)-$(SYN_CONFIG)
OBJ_PAR_DIR = obj/par-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)-$(TECHNOLOGY)-$(MAP_CONFIG)-$(SYN_CONFIG)-$(PAR_CONFIG)

# CHECK_* directories are where the output of tests go
CHECK_CORE_DIR = check/sim/core-$(CORE_GENERATOR)-$(CORE_CONFIG)
CHECK_SOC_DIR = check/sim/soc-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)
CHECK_MAP_DIR = check/sim/map-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)-$(TECHNOLOGY)-$(MAP_CONFIG)
CHECK_SYN_DIR = check/sim/syn-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)-$(TECHNOLOGY)-$(MAP_CONFIG)-$(SYN_CONFIG)
CHECK_PAR_DIR = check/sim/par-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)-$(TECHNOLOGY)-$(MAP_CONFIG)-$(SYN_CONFIG)-$(PAR_CONFIG)

# TRACE_* directories are where VPDs go
TRACE_CORE_DIR = trace/core-$(CORE_GENERATOR)-$(CORE_CONFIG)
TRACE_SOC_DIR = trace/soc-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)
TRACE_MAP_DIR = trace/map-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)-$(TECHNOLOGY)-$(MAP_CONFIG)
TRACE_SYN_DIR = trace/syn-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)-$(TECHNOLOGY)-$(MAP_CONFIG)-$(SYN_CONFIG)
TRACE_PAR_DIR = trace/par-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)-$(TECHNOLOGY)-$(MAP_CONFIG)-$(SYN_CONFIG)-$(PAR_CONFIG)

# SIGNOFF_* directories are where signoff-related checks go
SIGNOFF_SYN_FORMAL_DIR = check/formal/syn-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)-$(TECHNOLOGY)-$(MAP_CONFIG)-$(SYN_CONFIG)
SIGNOFF_SYN_POWER_DIR = check/power/syn-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)-$(MAP_CONFIG)-$(SYN_CONFIG)

# Define the location of FIRRTL (used by barstools, etc).
FIRRTL_HOME ?= src/tools/firrtl

##############################################################################
# Various external tools and binaries used in PLSI.
##############################################################################

CMD_PATH_PCONFIGURE_LIB ?= $(OBJ_TOOLS_BIN_PATH_PCONFIGURE_LIB)
CMD_PTEST ?= $(OBJ_TOOLS_BIN_PTEST)
CMD_PCONFIGURE ?= $(OBJ_TOOLS_BIN_PCONFIGURE)
CMD_PPKGCONFIG ?= $(OBJ_TOOLS_BIN_PPKGCONFIG)
CMD_PHC ?= $(OBJ_TOOLS_BIN_PHC)

CMD_PATH_TCLAP_PC ?= $(OBJ_TOOLS_BIN_PATH_TCLAP_PC)

CMD_PCAD_INFER_DECOUPLED ?= $(OBJ_TOOLS_BIN_PCAD_INFER_DECOUPLED)

CMD_SBT ?= $(OBJ_TOOLS_BIN_SBT)

CMD_GCC ?= $(OBJ_TOOLS_BIN_GCC)
CMD_GXX ?= $(OBJ_TOOLS_BIN_GXX)
CMD_PATH_GCC_LIB64 ?= $(OBJ_TOOLS_BIN_PATH_GCC_LIB64)

CMD_PSON2JSON ?= $(OBJ_TOOLS_BIN_PSON2JSON)
CMD_PATH_PSON_PC ?= $(OBJ_TOOLS_BIN_PATH_PSON_PC)

CMD_PYTHON3 ?= $(OBJ_TOOLS_BIN_PYTHON3)

CMD_FIRRTL_GENERATE_TOP = $(OBJ_TOOLS_BIN_DIR)/barstools/bin/tapeout.transforms.GenerateTop
CMD_FIRRTL_GENERATE_HARNESS = $(OBJ_TOOLS_BIN_DIR)/barstools/bin/tapeout.transforms.GenerateHarness
CMD_FIRRTL_MACRO_COMPILER = $(OBJ_TOOLS_BIN_DIR)/barstools/bin/macros.MacroCompiler
CMD_LIST_MACROS = $(abspath src/tools/technology/list-macros)

# TODO(edwardw): find a cleaner way to get around this.
# The problem is that binaries compiled with libpson depend on it...
LD_LIBRARY_PATH := $(LD_LIBRARY_PATH):$(dir $(CMD_PATH_PSON_PC))/..
export LD_LIBRARY_PATH

# Internal commands

PLSI_CMD_YAML2JSON = src/tools/yaml2json
$(PLSI_CMD_YAML2JSON): $(CMD_PYTHON3) src/tools/pyyaml
	touch $@

##############################################################################
# Module Loading
##############################################################################

# This section loads the various PLSI modules. This section is not intended
# to be directly modified, but if you're trying to add a new addon then
# you might want to look here to see what variables it's expected to set.

# First, locate the technology module.

TECHNOLOGY_MODULE_PATH = $(wildcard src/technologies/$(TECHNOLOGY)/ $(ADDONS_DIR)/technologies/$(TECHNOLOGY)/ $(ADDONS_TECH_DIR)/$(TECHNOLOGY)/ $(ADDONS_TECH_DIR_DIRECT))
ifneq ($(words $(TECHNOLOGY_MODULE_PATH)),1)
$(error Unable to resolve TECHNOLOGY=$(TECHNOLOGY): found "$(TECHNOLOGY_MODULE_PATH)")
endif

# Locates the various modules that will be used for the flow itself.
# TODO(edwardw): rename _ADDONs to _MODULEs, in due time.
SCHEDULER_ADDON = $(wildcard src/addons/scheduler/$(SCHEDULER)/ $(ADDONS_DIR)/scheduler/$(SCHEDULER)/)
ifneq ($(words $(SCHEDULER_ADDON)),1)
$(error Unable to resolve SCHEDULER=$(SCHEDULER): found "$(SCHEDULER_ADDON)")
endif

CORE_GENERATOR_ADDON = $(wildcard src/addons/core-generator/$(CORE_GENERATOR)/ $(ADDONS_DIR)/core-generator/$(CORE_GENERATOR)/)
ifneq ($(words $(CORE_GENERATOR_ADDON)),1)
$(error Unable to resolve CORE_GENERATOR=$(CORE_GENERATOR): found "$(CORE_GENERATOR_ADDON)")
endif

CORE_SIMULATOR_ADDON = $(wildcard src/addons/simulator/$(CORE_SIMULATOR)/ $(ADDONS_DIR)/simulator/$(CORE_SIMULATOR)/)
ifneq ($(words $(CORE_SIMULATOR_ADDON)),1)
$(error Unable to resolve CORE_SIMULATOR=$(CORE_SIMULATOR): found "$(CORE_SIMULATOR_ADDON)")
endif

SOC_GENERATOR_ADDON = $(wildcard src/addons/soc-generator/$(SOC_GENERATOR)/ $(ADDONS_DIR)/soc-generator/$(SOC_GENERATOR)/)
ifneq ($(words $(SOC_GENERATOR_ADDON)),1)
$(error Unable to resolve SOC_GENERATOR=$(SOC_GENERATOR): found "$(SOC_GENERATOR_ADDON)")
endif

SOC_SIMULATOR_ADDON = $(wildcard src/addons/simulator/$(SOC_SIMULATOR)/ $(ADDONS_DIR)/simulator/$(SOC_SIMULATOR)/)
ifneq ($(words $(SOC_SIMULATOR_ADDON)),1)
$(error Unable to resolve SOC_SIMULATOR=$(SOC_SIMULATOR): found "$(SOC_SIMULATOR_ADDON)")
endif

MAP_SIMULATOR_ADDON = $(wildcard src/addons/simulator/$(MAP_SIMULATOR)/ $(ADDONS_DIR)/simulator/$(MAP_SIMULATOR)/)
ifneq ($(words $(MAP_SIMULATOR_ADDON)),1)
$(error Unable to resolve MAP_SIMULATOR=$(MAP_SIMULATOR): found "$(MAP_SIMULATOR_ADDON)")
endif

MAP_TOOL_ADDON = $(wildcard src/addons/map/$(MAP_TOOL)/ $(ADDONS_DIR)/map/$(MAP_TOOL)/)
ifneq ($(words $(MAP_TOOL_ADDON)),1)
$(error Unable to resolve MAP_TOOL=$(MAP_TOOL): found "$(MAP_TOOL_ADDON)")
endif

SYNTHESIS_TOOL_ADDON = $(wildcard src/addons/synthesis/$(SYNTHESIS_TOOL)/ $(ADDONS_DIR)/synthesis/$(SYNTHESIS_TOOL)/)
ifneq ($(words $(SYNTHESIS_TOOL_ADDON)),1)
$(error Unable to resolve SYNTHESIS_TOOL=$(SYNTHESIS_TOOL): found "$(SYNTHESIS_TOOL_ADDON)")
endif

SYN_SIMULATOR_ADDON = $(wildcard src/addons/simulator/$(SYN_SIMULATOR)/ $(ADDONS_DIR)/simulator/$(SYN_SIMULATOR)/)
ifneq ($(words $(SYN_SIMULATOR_ADDON)),1)
$(error Unable to resolve SYN_SIMULATOR=$(SYN_SIMULATOR): found "$(SYN_SIMULATOR_ADDON)")
endif

SYN_FORMAL_ADDON = $(wildcard src/addons/formal/$(SYN_FORMAL_TOOL)/ $(ADDONS_DIR)/formal/$(SYN_FORMAL_TOOLS))
ifneq ($(words $(SYN_FORMAL_ADDON)),1)
$(error Unable to resolve SYN_FORMAL_TOOL=$(SYN_FORMAL_TOOL): found "$(SYN_FORMAL_ADDON)")
endif

PAR_TOOL_ADDON = $(wildcard src/addons/par/$(PAR_TOOL)/ $(ADDONS_DIR)/par/$(PAR_TOOL)/)
ifneq ($(words $(PAR_TOOL_ADDON)),1)
$(error Unable to resolve PAR_TOOL=$(PAR_TOOL): found "$(PAR_TOOL_ADDON)")
endif

PAR_SIMULATOR_ADDON = $(wildcard src/addons/simulator/$(PAR_SIMULATOR)/ $(ADDONS_DIR)/simulator/$(PAR_SIMULATOR)/)
ifneq ($(words $(PAR_SIMULATOR_ADDON)),1)
$(error Unable to resolve PAR_SIMULATOR=$(PAR_SIMULATOR): found "$(PAR_SIMULATOR_ADDON)")
endif

SYN_POWER_SIGNOFF_ADDON = $(wildcard src/addons/signoff-power/$(SYN_POWER_SIGNOFF_TOOL)/ $(ADDONS_DIR)/signoff-power/$(SYN_POWER_SIGNOFF_TOOLS))
ifneq ($(words $(SYN_POWER_SIGNOFF_ADDON)),1)
$(error Unable to resolve SYN_POWER_SIGNOFF_TOOL=$(SYN_POWER_SIGNOFF_TOOL): found "$(SYN_FORMAL_ADDON)")
endif

PAR_POWER_SIGNOFF_ADDON = $(wildcard src/addons/signoff-power/$(PAR_POWER_SIGNOFF_TOOL)/ $(ADDONS_DIR)/signoff-power/$(PAR_POWER_SIGNOFF_TOOLS))
ifneq ($(words $(PAR_POWER_SIGNOFF_ADDON)),1)
$(error Unable to resolve PAR_POWER_SIGNOFF_TOOL=$(PAR_POWER_SIGNOFF_TOOL): found "$(PAR_FORMAL_ADDON)")
endif

##############################################################################
# Config Loading
##############################################################################

# For the discussion of why .yml vs .yaml, please see http://markdblackwell.blogspot.com/2013/07/use-file-extension-yml-for-yaml.html

# Define some useful targets.
OBJ_CONFIG_DB = $(OBJ_CONFIG_DIR)/config.db.json
# For various bits generated by the config files.
OBJ_CONFIG_BITS_DIR = $(OBJ_CONFIG_DIR)/bits
PLSI_CMD_GET_CONFIG = src/tools/get-config
PLSI_CMD_RECTIFY_PATH = src/tools/rectify-path
PLSI_CMD_EXECUTE_CONFIG_META = src/tools/execute-config-meta

# How to get a config:
# $(shell $(PLSI_CMD_GET_CONFIG) [-e] [-n something_custom_to_print_if_null] $(OBJ_CONFIG_DB) your.key.here)

# TODO: expand this into a proper system when we have more core configs.
# TODO(edwardw): write a script to generate this and check against a .yml template (for correctness & documentation)
PLSI_CORE_CONFIG = $(OBJ_CONFIG_DIR)/plsi_core.json
$(PLSI_CORE_CONFIG):
	@mkdir -p $(dir $@)
	echo "{ \"plsi.core.obj_tech_dir\": \"$(abspath $(OBJ_TECH_DIR))\" }" > $@

CONFIG_LIST = $(PLSI_CORE_CONFIG)

# TODO(edwardw): expand this system to all modules (currently only applied to par)
# TODO(edwardw): generate these automatically for all modules

PAR_TOOL_CONFIG_DEFAULTS_YAML = $(PAR_TOOL_ADDON)/defaults.yml
PAR_TOOL_CONFIG_DEFAULTS_JSON = $(PAR_TOOL_ADDON)/defaults.json
CONFIG_LIST += $(wildcard $(PAR_TOOL_CONFIG_DEFAULTS_YAML)) $(wildcard $(PAR_TOOL_CONFIG_DEFAULTS_JSON))

# Technology defaults
TECHNOLOGY_CONFIG_DEFAULTS_YAML = $(TECHNOLOGY_MODULE_PATH)/defaults.yml
TECHNOLOGY_CONFIG_DEFAULTS_JSON = $(TECHNOLOGY_MODULE_PATH)/defaults.json
CONFIG_LIST += $(wildcard $(TECHNOLOGY_CONFIG_DEFAULTS_YAML)) $(wildcard $(TECHNOLOGY_CONFIG_DEFAULTS_JSON))

# Project config
PROJECT_NAME ?= project
PROJECT_CONFIG_YAML ?=
PROJECT_CONFIG_JSON ?=
CONFIG_LIST += $(wildcard $(PROJECT_CONFIG_YAML)) $(wildcard $(PROJECT_CONFIG_JSON))

$(OBJ_CONFIG_DB): src/tools/build-config-auto $(CONFIG_LIST) $(CMD_PYTHON3)
	@mkdir -p $(dir $@)
	PATH="$(abspath $(dir $(CMD_PYTHON3))):$(PATH)" \
		OBJ_CONFIG_DB=$(OBJ_CONFIG_DB) \
		OBJ_CONFIG_DIR=$(OBJ_CONFIG_DIR) \
		OBJ_CONFIG_BITS_DIR=$(OBJ_CONFIG_BITS_DIR) \
		PLSI_CMD_YAML2JSON=$(PLSI_CMD_YAML2JSON) \
		PLSI_CMD_RECTIFY_PATH=$(PLSI_CMD_RECTIFY_PATH) \
		PLSI_CMD_EXECUTE_CONFIG_META=$(PLSI_CMD_EXECUTE_CONFIG_META) \
		$< $(CONFIG_LIST)

# Deal with old config system below.

# Check to ensure all the configurations actually exist.
PLSI_CAD_CONFIG_FILE = $(word 1,$(wildcard \
    $(CONFIG_DIR)/$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)-$(TECHNOLOGY)-$(MAP_CONFIG)-$(SYN_CONFIG)-$(PAR_CONFIG).plsi_config.json \
    src/configs/$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)-$(TECHNOLOGY)-$(MAP_CONFIG)-$(SYN_CONFIG)-$(PAR_CONFIG).plsi_config.json \
    $(CONFIG_DIR)/$(CORE_GENERATOR)-$(CORE_CONFIG)-$(TECHNOLOGY).plsi_config.json \
    src/configs/$(CORE_GENERATOR)-$(CORE_CONFIG)-$(TECHNOLOGY).plsi_config.json \
    $(CONFIG_DIR)/$(TECHNOLOGY).plsi_config.json \
    $(TECHNOLOGY_MODULE_PATH)/$(TECHNOLOGY).plsi_config.json \
  ))
ifeq ($(PLSI_CAD_CONFIG_FILE),)
$(error Unable to resolve PLSI_CAD_CONFIG_FILE, there should be a default at $(TECHNOLOGY_MODULE_PATH)/$(TECHNOLOGY).plsi_config.json)
endif

# In order to prevent EEs from seeing Makefiles, the technology description is
# a JSON file.  This simply checks to see that the file exists before
# continuing, in order to ensure there's no trickier errors.
TECHNOLOGY_JSON = $(wildcard $(TECHNOLOGY_MODULE_PATH)/$(TECHNOLOGY).tech.json)
ifeq ($(TECHNOLOGY_JSON),)
$(error "Unable to find technology $(TECHNOLOGY); expected a corresponding .tech.json file")
endif

OBJ_TECHNOLOGY_MACRO_LIBRARY = $(OBJ_TECH_DIR)/plsi-generated/all.macro_library.json
OBJ_TECHNOLOGY_JSON = $(OBJ_TECH_DIR)/plsi-generated/$(TECHNOLOGY).filtered.tech.json

# Actually loads the various addons, this is staged so we load "vars" first
# (which set variables) and "rules" second, which set the make rules (which can
# depend on those variables).
include $(SCHEDULER_ADDON)/vars.mk

ifeq ($(SCHEDULER_CMD),)
# A command that schedules large jobs.  This should respect the jobserver if
# it's run locally on this machine, but it's expected that some of this stuff
# will run on clusters and therefor won't respect the jobserver.
$(error SCHEDULER needs to set SCHEDULER_CMD)
endif

include $(CORE_GENERATOR_ADDON)/vars.mk
include $(CORE_SIMULATOR_ADDON)/core-vars.mk
include $(CORE_GENERATOR_ADDON)/rules.mk
include $(CORE_SIMULATOR_ADDON)/core-rules.mk

ifeq ($(CORE_TOP),)
# The name of the top-level RTL module that comes out of the core generator.
$(error CORE_GENERATOR needs to set CORE_TOP)
endif

ifeq ($(OBJ_CORE_SIM_FILES),)
# The extra files that are needed to simulate the core, but those that won't be
# replaced by the eventual macro generation steps.  These won't be touched by
# any tools.
$(error CORE_GENERATOR needs to set OBJ_CORE_SIM_FILES)
endif

ifeq ($(OBJ_CORE_SIM_MACRO_FILES),)
# The extra files that are necessary to simulate the core, but will be replaced
# by some sort of technology-specific macro generation that the CAD tools won't
# automatically map to -- for example SRAMs.  These will be replaced by other
# things in various stages of simulation.
$(error CORE_GENERATOR needs to set OBJ_CORE_SIM_MACRO_FILES)
endif

ifeq ($(OBJ_CORE_MACROS),)
# This is a JSON description of the macros that a core generator can request
# from PLSI.  Various other PLSI tools will consume these macro descriptions in
# order to insert them into other parts of the flow (for example, SRAM macros
# will be used in synthesis, floorplanning, and P&R).
$(error CORE_GENERATOR needs to set OBJ_CORE_MACROS)
endif

ifeq ($(OBJ_CORE_RTL_V)$(OBJ_CORE_RTL_VHD),)
# The name of the top-level RTL Verilog output by the core.
$(error CORE_GENERATOR needs to set OBJ_CORE_RTL_V or OBJ_CORE_RTL_VHD)
endif

include $(SOC_GENERATOR_ADDON)/vars.mk
include $(SOC_SIMULATOR_ADDON)/soc-vars.mk

ifeq ($(SOC_TOP),)
# The name of the top-level RTL module that comes out of the soc generator.
$(error SOC_GENERATOR needs to set SOC_TOP)
endif

ifeq ($(OBJ_SOC_RTL_V)$(OBJ_SOC_RTL_VHD),)
# The name of the top-level RTL Verilog output by the SOC generator.
$(error SOC_GENERATOR needs to set OBJ_SOC_RTL_V or OBJ_SOC_RTL_VHD)
endif

ifeq ($(OBJ_SOC_SIM_FILES),)
# This is just like OBJ_CORE_SIM_FILES, but if the soc needs something extra it
# can be stuck in here.
$(error SOC_GENERATOR needs to set OBJ_SOC_SIM_FILES)
endif

ifeq ($(OBJ_SOC_SIM_MACRO_FILES),)
# This is just like OBJ_SOC_SIM_MACRO_FILES, but if the soc needs something
# extra it can be stuck in here.
$(error SOC_GENERATOR needs to set OBJ_SOC_SIM_MACRO_FILES)
endif

ifeq ($(OBJ_SOC_MACROS),)
# Like OBJ_CORE_MACROS, but for the whole SOC
$(error SOC_GENERATOR needs to set OBJ_SOC_MACROS)
endif

# This selects the technology to implement the design with.
-include $(OBJ_TECH_DIR)/makefrags/vars.mk

# The map step implements technology-specific macros (SRAMs, pads, clock stuff)
# in a manner that's actually technology-specific (as opposed to using the
# generic PLSI versions).  This results in some verilog for simulation, but it
# may result in some additional verilog for synthesis (building large SRAMs out
# of smaller ones, for example).
MAP_TOP = $(SOC_TOP)
MAP_SIM_TOP = $(CORE_SIM_TOP)

# There's always a mapped Verilog file since there's macros in it and I'm only
# going to bother generating macros as Verilog.
OBJ_MAP_RTL_V = $(OBJ_SOC_RTL_V) $(OBJ_MAP_DIR)/plsi-generated/$(MAP_TOP).macros_for_synthesis.v $(TECHNOLOGY_VERILOG_SYNTHESIS_FILES)
OBJ_MAP_RTL_VHD = $(OBJ_SOC_RTL_VHD)

OBJ_MAP_SYN_FILES =
OBJ_MAP_SIM_FILES = $(OBJ_SOC_SIM_FILES)
OBJ_MAP_SIM_MACRO_FILES = $(TECHNOLOGY_VERILOG_SIMULATION_FILES)
OBJ_MAP_MACROS = $(OBJ_MAP_DIR)/plsi-generated/$(MAP_TOP).macros.json

# Macro compilers need to know the actual list of required macros, as it's
# unreasonable to expect that the entire output of something like a memory
# compiler should generate every possible output before running synthesis.
ifeq ($(filter $(MAKECMDGOALS),clean distclean),)
-include $(OBJ_MAP_DIR)/plsi-generated/$(MAP_TOP).macros_for_synthesis.mk
endif

# This has to come after the macro vars makefrags, since it uses them to build
# the simulator.
include $(MAP_SIMULATOR_ADDON)/map-vars.mk

# The synthesis step converts RTL to a netlist.  This only touches the
# synthesizable Verilog that comes out of the mapping step, but additionally
# requires a whole bunch of files so it knows what to do with the macros.
include $(SYNTHESIS_TOOL_ADDON)/vars.mk
include $(SYN_SIMULATOR_ADDON)/syn-vars.mk

ifeq ($(OBJ_SYN_MAPPED_V),)
$(error SYNTHESIS_TOOL needs to set OBJ_SYN_MAPPED_V)
endif

ifeq ($(SYN_TOP),)
$(error SYNTHESIS_TOOL needs to set SYN_TOP)
endif

ifeq ($(SYN_SIM_TOP),)
$(error SYNTHESIS_TOOLS needs to set SYN_SIM_TOP)
endif

# A formal verification tool for post-synthesis.
include $(SYN_FORMAL_ADDON)/syn-vars.mk

# The place and route step (par) places all the elements of a netlist and then
# routes the wires between them.  This can only touch the output of the
# synthesis step, but additionally requires all the synthesis macro description
# files and some extra floorplanning information.
include $(PAR_TOOL_ADDON)/vars.mk
include $(PAR_SIMULATOR_ADDON)/par-vars.mk

ifeq ($(OBJ_PAR_ROUTED_V),)
$(error PAR_TOOL needs to set OBJ_PAR_ROUTED_V)
endif

ifeq ($(PAR_TOP),)
$(error PAR_TOOL needs to set PAR_TOP)
endif

ifeq ($(PAR_SIM_TOP),)
$(error PAR_TOOL needs to set PAR_SIM_TOP)
endif

# Various signoff tools
include $(SYN_POWER_SIGNOFF_ADDON)/syn-vars.mk

# All the rules get sourced last.  We don't allow any variables to be set here,
# so the ordering isn't important.
include $(SOC_GENERATOR_ADDON)/rules.mk
include $(SOC_SIMULATOR_ADDON)/soc-rules.mk
-include $(OBJ_TECH_DIR)/makefrags/rules.mk
include $(MAP_TOOL_ADDON)/rules.mk
include $(MAP_SIMULATOR_ADDON)/map-rules.mk
include $(SYNTHESIS_TOOL_ADDON)/rules.mk
include $(SYN_SIMULATOR_ADDON)/syn-rules.mk
include $(SYN_FORMAL_ADDON)/syn-rules.mk
include $(PAR_TOOL_ADDON)/rules.mk
include $(PAR_SIMULATOR_ADDON)/par-rules.mk
include $(SYN_POWER_SIGNOFF_ADDON)/syn-rules.mk
include $(PAR_POWER_SIGNOFF_ADDON)/par-rules.mk

##############################################################################
# User Targets
##############################################################################

# The targets in here are short names for some of the internal targets below.
# These are probably the commands you want to manually run.

# I'm not sure exactly what is going on here, but it looks like the makefrag
# generation breaks parallel builds.  This target doesn't do anything but
# generate the various makefrags and doesn't run any other commands.
.PHONY: makefrags
makefrags::

# Runs all the test cases.  Note that this _always_ passes, you need to run
# "make report" to see if the tests passed or not.
.PHONY: check
check: $(patsubst %,check-%,core soc map syn par)
ifneq ($(SYN_POWER_SIGNOFF_TOOL),none)
check: signoff-syn-power
endif

# A virtual target that reports on the status of the test cases, in addition to
# running them (if necessary).
.PHONY: report
report: $(CMD_PTEST) check
	@+$(CMD_PTEST)

# These various smaller test groups are all defined by the core generator!
.PHONY: check-core
check-core:

.PHONY: check-soc
check-soc:

.PHONY: check-map
check-map:

.PHONY: check-syn
check-syn:

.PHONY: check-par
check-par:

.PHONY: signoff-syn-power
signoff-syn-power:

# The various RTL targets
.PHONY: core-verilog
core-verilog: bin/core-$(CORE_GENERATOR)-$(CORE_CONFIG)/$(CORE_TOP).v
	$(info $@ availiable at $<)

.PHONY: soc-verilog
soc-verilog: bin/soc-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)/$(SOC_TOP).v
	$(info $@ availiable at $<)

.PHONY: map-verilog
map-verilog: bin/map-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)-$(TECHNOLOGY)-$(MAP_CONFIG)/$(MAP_TOP).v
	$(info $@ availiable at $<)

.PHONY: syn-verilog
syn-verilog: bin/syn-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)-$(TECHNOLOGY)-$(MAP_CONFIG)-$(SYN_CONFIG)/$(SYN_TOP).v
	$(info $@ availiable at $<)

.PHONY: par-verilog
par-verilog: bin/par-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)-$(TECHNOLOGY)-$(MAP_CONFIG)-$(SYN_CONFIG)-$(PAR_CONFIG)/$(PAR_TOP).v
	$(info $@ availiable at $<)

# The various simulators
.PHONY: core-simulator
core-simulator: bin/core-$(CORE_GENERATOR)-$(CORE_CONFIG)/$(CORE_TOP)-simulator
.PHONY: soc-simulator
soc-simulator: bin/soc-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)/$(SOC_TOP)-simulator
.PHONY: map-simulator
map-simulator: bin/map-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)-$(TECHNOLOGY)-$(MAP_CONFIG)/$(MAP_TOP)-simulator
.PHONY: syn-simulator
syn-simulator: bin/syn-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)-$(TECHNOLOGY)-$(MAP_CONFIG)-$(SYN_CONFIG)/$(SYN_TOP)-simulator
.PHONY: par-simulator
par-simulator: bin/par-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)-$(TECHNOLOGY)-$(MAP_CONFIG)-$(SYN_CONFIG)-$(PAR_CONFIG)/$(PAR_TOP)-simulator

# This just cleans everything
.PHONY: clean
clean::
	rm -rf $(OBJ_TOOLS_BIN_DIR) $(OBJ_TOOLS_SRC_DIR)
	rm -rf $(OBJ_CORE_DIR) $(CHECK_CORE_DIR)
	rm -rf $(OBJ_SOC_DIR) $(CHECK_SOC_DIR)
	rm -rf $(OBJ_SYN_DIR) $(CHECK_SYN_DIR)
	rm -rf $(OBJ_PAR_DIR) $(CHECK_PAR_DIR)

.PHONY: distclean
distclean: clean
	rm -rf bin/ obj/ check/

# Information for bug reporting
.PHONY: bugreport
bugreport::
	@echo "SCHEDULER_ADDON=$(SCHEDULER_ADDON)"
	@echo "CORE_GENERATOR_ADDON=$(CORE_GENERATOR_ADDON)"
	@echo "CORE_SIMULATOR_ADDON=$(CORE_SIMULATOR_ADDON)"
	@echo "SOC_GENERATOR_ADDON=$(SOC_GENERATOR_ADDON)"
	@echo "SOC_SIMULATOR_ADDON=$(SOC_SIMULATOR_ADDON)"
	@echo "SYNTHESIS_TOOL_ADDON=$(SYNTHESIS_TOOL_ADDON)"
	@echo "PAR_TOOL_ADDON=$(PAR_TOOL_ADDON)"
	@echo "TECHNOLOGY=$(TECHNOLOGY)"
	uname -a
	@echo "PKG_CONFIG_PATH=$$PKG_CONFIG_PATH"
	pkg-config tclap --cflags --libs
	@find $(PLSI_CACHE_DIR) -type f 2>/dev/null | xargs sha1sum /dev/null

##############################################################################
# Internal Tools Targets
##############################################################################

include Makefile.tools

##############################################################################
# Pattern rules that try to copy outputs
##############################################################################

bin/core-$(CORE_GENERATOR)-$(CORE_CONFIG)/$(CORE_TOP).v: $(OBJ_CORE_RTL_V)
	mkdir -p $(dir $@)
	cat $^ > $@

bin/soc-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)/$(SOC_TOP).v: $(OBJ_SOC_RTL_V)
	mkdir -p $(dir > $@)
	cat $^ > $@

bin/map-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)-$(TECHNOLOGY)-$(MAP_CONFIG)/$(MAP_TOP).v: $(OBJ_MAP_RTL_V)
	mkdir -p $(dir > $@)
	cat $^ > $@

bin/syn-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)-$(TECHNOLOGY)-$(MAP_CONFIG)-$(SYN_CONFIG)/$(SYN_TOP).v: $(OBJ_SYN_MAPPED_V)
	mkdir -p $(dir > $@)
	cat $^ > $@

bin/par-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)-$(TECHNOLOGY)-$(MAP_CONFIG)-$(SYN_CONFIG)-$(PAR_CONFIG)/$(PAR_TOP).v: $(OBJ_PAR_ROUTED_V)
	mkdir -p $(dir > $@)
	cat $^ > $@

bin/core-$(CORE_GENERATOR)-$(CORE_CONFIG)/$(CORE_TOP)-simulator: $(OBJ_CORE_SIMULATOR)
	mkdir -p $(dir > $@)
	cat $^ > $@

bin/soc-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)/$(SOC_TOP)-simulator: $(OBJ_SOC_SIMULATOR)
	mkdir -p $(dir > $@)
	cat $^ > $@

bin/map-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)-$(TECHNOLOGY)-$(MAP_CONFIG)/$(MAP_TOP)-simulator: $(OBJ_MAP_SIMULATOR)
	mkdir -p $(dir > $@)
	cat $^ > $@

bin/syn-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)-$(TECHNOLOGY)-$(MAP_CONFIG)-$(SYN_CONFIG)/$(SYN_TOP)-simulator: $(OBJ_SYN_SIMULATOR)
	mkdir -p $(dir > $@)
	cat $^ > $@

bin/par-$(CORE_GENERATOR)-$(CORE_CONFIG)-$(SOC_CONFIG)-$(TECHNOLOGY)-$(MAP_CONFIG)-$(SYN_CONFIG)-$(PAR_CONFIG)/$(PAR_TOP)-simulator: $(OBJ_PAR_SIMULATOR)
	mkdir -p $(dir > $@)
	cat $^ > $@

###############################################################################
# Internal Flow Targets
###############################################################################

# The targets in this section are part of the flow, but they're not things that
# can be customized using multiple variables because I don't think there should
# ever be more than one implementation of them.

# Generates a technology-specific makefrag from the technology's description
# file.

$(OBJ_TECHNOLOGY_JSON): \
		src/tools/technology/filter-json \
		$(TECHNOLOGY_JSON) \
		$(PLSI_CAD_CONFIG_FILE) \
		$(CMD_PYTHON3)
	@mkdir -p $(dir $@)
	PATH="$(abspath $(dir $(CMD_PYTHON3))):$(PATH)" $< -o $@ -i $(filter-out $@,$(filter %.tech.json,$^)) -c $(filter %.plsi_config.json,$^)

$(OBJ_TECH_DIR)/makefrags/vars.mk: src/tools/technology/generate-vars $(OBJ_TECHNOLOGY_JSON) $(CMD_PYTHON3)
	@mkdir -p $(dir $@)
	PATH="$(abspath $(dir $(CMD_PYTHON3))):$(PATH)" $< -o $@ -i $(filter %.tech.json,$^) -s $(dir $(TECHNOLOGY_JSON))

$(OBJ_TECH_DIR)/makefrags/rules.mk: src/tools/technology/generate-rules $(OBJ_TECHNOLOGY_JSON) $(CMD_PYTHON3)
	@mkdir -p $(dir $@)
	PATH="$(abspath $(dir $(CMD_PYTHON3))):$(PATH)" $< -o $@ -i $(filter %.tech.json,$^)

# FIXME: This is awkward: the technology-specific macro scripts might end up
# generating their own Verilog
$(OBJ_TECHNOLOGY_MACRO_LIBRARY): \
		src/tools/technology/generate-macros \
		$(OBJ_TECHNOLOGY_JSON) \
		$(OBJ_TECH_DIR)/extracted/plsi-techtar.stamp \
		$(TECHNOLOGY_MACRO_PROVIDE_SCRIPTS) \
		$(TECHNOLOGY_VERILOG_SIMULATION_FILES) \
		$(TECHNOLOGY_DOCUMENTATION_PDF_FILES) \
		$(CMD_PYTHON3)
	@mkdir -p $(dir $@)
	PATH="$(abspath $(dir $(CMD_PYTHON3))):$(PATH)" $< -o $@ -i $(filter %.tech.json,$^) -s $(dir $(TECHNOLOGY_JSON)) --technology $(TECHNOLOGY) || (echo "generate-macros failed with status $$?"; rm -f "$@"; exit 1)
